{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","props","className","style","recipe","title","Math","floor","calories","src","image","alt","ingredients","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","request","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","Key","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","module","exports"],"mappings":"0OAeeA,EAZA,SAACC,GACZ,OAAO,sBAAKC,UAAWC,IAAMC,OAAtB,UACH,6BAAKH,EAAMI,QACX,2CAAcC,KAAKC,MAAMN,EAAMO,aAC/B,qBAAKN,UAAU,MAAMO,IAAKR,EAAMS,MAAOC,IAAKV,EAAMI,QAClD,6CACA,6BAAKJ,EAAMW,YAAYC,KAAI,SAAAC,GAAU,OACjC,6BAAKA,EAAWC,gB,MCiDbC,MAvDf,WACE,IADa,EAKgBC,mBAAS,IALzB,mBAKNC,EALM,KAKEC,EALF,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOYJ,mBAAS,WAPrB,mBAONK,EAPM,KAOAC,EAPA,KASTC,EAAO,0CAAqCF,EAArC,mBARI,WAQJ,oBAPI,oCAUfG,qBAAU,WACTC,MACC,CAACJ,IAEH,IAAMI,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAMJ,GADZ,cACXK,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBZ,EAAWY,EAAKC,MAChBC,QAAQC,IAAIH,GAJK,2CAAH,qDAkBhB,OACE,sBAAK7B,UAAU,MAAf,UACE,uBAAMiC,SARS,SAACC,GACjBA,EAAMC,iBACNd,EAASH,GACTC,EAAU,KAKkBnB,UAAU,aAArC,UACE,uBAAOA,UAAU,YAAYoC,KAAK,OAAOC,YAAY,SAASC,MAAOpB,EAAQqB,SAd7D,SAACL,GACpBf,EAAUe,EAAMM,OAAOF,UAcpB,wBAAQtC,UAAU,eAAeoC,KAAK,SAAtC,uBAEH,qBAAKpC,UAAU,UAAf,SACEgB,EAAQL,KAAI,SAAAT,GAAM,OACjB,cAAC,EAAD,CACAuC,IAAKvC,EAAOA,OAAOwC,MACnBvC,MAAOD,EAAOA,OAAOwC,MACrBpC,SAAUJ,EAAOA,OAAOI,SACxBE,MAAON,EAAOA,OAAOM,MACrBE,YAAaR,EAAOA,OAAOQ,uBCvCpBiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BZ,K,kBCbAa,EAAOC,QAAU,CAAC,OAAS,0B","file":"static/js/main.c6d450c0.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./recipe.module.css\"\n\nconst Recipe = (props) => {\n    return <div className={style.recipe}>\n        <h1>{props.title}</h1>\n        <p>Calories: {Math.floor(props.calories)}</p>\n        <img className=\"img\" src={props.image} alt={props.title} />\n        <p>Ingredients:</p>\n        <ol>{props.ingredients.map(ingredient => (\n            <li>{ingredient.text}</li>\n        ))}</ol>\n    </div>\n}\n\nexport default Recipe;","import React, { useState, useEffect } from \"react\";\nimport Recipe from  \"./Recipe.js\"\nimport './App.css';\n\nfunction App() {\n  const app_id = \"31dab3c3\"\n  const apiKey = \"caad03d7df346921961b89f44b2c6b47\"\n  \n  \n  const [recipes,setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\")\n  const [query,setQuery] = useState(\"chicken\")\n\n  var request =`https://api.edamam.com/search?q=${query}&app_id=${app_id}&app_key=${apiKey}`\n\n\n  useEffect(() => {\n   getRecipes();\n  },[query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(request);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data)\n  }\n\n   const updateSearch = (event) => {\n     setSearch(event.target.value);\n     \n   }\n\n   const getSearch = (event) => {\n     event.preventDefault();\n     setQuery(search);\n     setSearch(\"\");\n   }\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"searchForm\">\n        <input className=\"searchBar\" type=\"text\" placeholder=\"Search\" value={search} onChange={updateSearch} ></input>\n        <button className=\"searchButton\" type=\"submit\">Submit</button>\n      </form>\n     <div className=\"recipes\">\n      {recipes.map(recipe => (\n        <Recipe \n        Key={recipe.recipe.label}\n        title={recipe.recipe.label}\n        calories={recipe.recipe.calories}\n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\"};"],"sourceRoot":""}